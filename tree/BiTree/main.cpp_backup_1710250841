/*
* auth        : Jefung
* version     : v1.0
* description : 
*		
* analyse     : 
*		
*/

#include <iostream>
#include <string>
#include <stdio.h>
#include "main.h"
using namespace std;
    class BiTree {
    private:
        BiTree *lchild;
        BiTree *rchild;
        BiTree *parent;
        char val;
    public:
        BiTree() {
			lchild = NULL;
			rchild = NULL;
			parent = NULL;
        }
        void initTree() {
            parent = NULL;
            lchild = NULL;
            rchild = NULL;
			cout << "please enter the root value: " << endl;
			char v;
			cin >> v;
            val = v;
			createBiTree(lchild,this);
			createBiTree(rchild,this);
        }
        void createBiTree(BiTree *&T, BiTree *p = NULL) {
            //树不为空，则已经初始化过
            // if( T != NULL) {
			//     cout << "dddd" << endl;
            //     createBiTree(T->lchild);
            //     createBiTree(T->rchild);
            //     return;
            // }

            char v;
            cout << "please enter a character to buid the next node, input <CR> will make the node NULL:" << endl;
            // cin.get(v);
			// v = getchar();
			cin >> v;
			if(v == '@'){
				cout << "space " << endl;
                T = NULL;
				return; 
			} else {
                T = new BiTree();
				T->val = v;
				T->parent = T;
                createBiTree(T->lchild,T);
                createBiTree(T->rchild,T);
            }
        }

		void createBiTreeByStr(string &str,BiTree *&T,BiTree *p){
			if(str.size() == 0){
				T = NULL;
				return;
			}

			char c;
			c = str[0];
			str = str.substr(1);
				if(c == '@'){
				cout << "space " << endl;
                T = NULL;
				return; 
			} else {
                T = new BiTree();
				T->val = c;
				T->parent = p;
				T->parent = T;
                createBiTreeByStr(str,T->lchild,T);
                // createBiTreeByStr(T->rchild,T);
            }
		}


        void preOrderTraverse(BiTree T) {
            if(T.lchild == NULL && T.rchild == NULL) {
                cout << T.val << endl;
                return;
            }
            if(T.lchild != NULL)
                preOrderTraverse(*T.lchild);
            if(T.rchild != NULL)
                preOrderTraverse(*T.rchild);
			cout << T.val << endl;
        }

		void destoryBiTree(BiTree *&T ){

			if(T->lchild != NULL)
				destoryBiTree(T->lchild);
			if(T->rchild != NULL)
				destoryBiTree(T->rchild);
			delete T;
			T = NULL;
		}

    };



int main(){
	BiTree T = BiTree();
	T.initTree();
	// T.createBiTree();
	T.preOrderTraverse(T);
	// T.destoryBiTree(T.rchild);
	// T.destoryBiTree(T.rchild);

		
}
